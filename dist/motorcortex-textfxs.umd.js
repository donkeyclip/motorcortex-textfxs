!function(t,p){"object"==typeof exports&&"undefined"!=typeof module?module.exports=p(require("@donkeyclip/motorcortex")):"function"==typeof define&&define.amd?define(["@donkeyclip/motorcortex"],p):(t="undefined"!=typeof globalThis?globalThis:t||self)["@donkeyclip/motorcortex-textfxs"]=p(t.MotorCortex)}(this,(function(t){"use strict";function p(t,p){let x=t.split(" ").join("+");return p&&(x+=`:wght@${p}`),x}class x extends t.HTMLClip{get fonts(){return[{type:"google-font",src:`https://fonts.googleapis.com/css2?family=${p(this.attrs.fontFamily,this.attrs.fontWeight)}&display=swap`}]}get html(){const{text:t,colors:p,width:x}=this.attrs;this.textSize=x/t.length;let n="",e="",a="";for(let x=0;x<t.length;x++){n+=`<span\n          id="text"\n          style="${`color : ${p[x%p.length]};`}"\n          class="letter letter-${x}"\n        >\n            ${t.slice(x,x+1)}\n        </span>`;for(let t=0;t<8;t++){e+=`\n          <polygon\n            class="poligon-${x}-${t} poligon"\n            points="0,0 ${.1*this.textSize*2},0 ${.1*this.textSize},${.1*this.textSize*2}"\n            style="fill: ${p[x%p.length]};"\n          ></polygon>`,a+=`\n          <circle\n            r="${.052*this.textSize}"\n            class="circ circ-${x}-${t}"\n            style="fill:rgb(238, 238, 238);"\n          ></circle>`}}return`\n      <div class="wrapper">\n        <div class="container">\n          <p\n            id="text"\n            style="font-size:${this.textSize}px"\n            class="text"\n          >${n}</p>\n          <svg id="svg">\n          ${e}\n          ${a}\n          </svg>\n        </div>\n      </div>\n      `}get css(){return`\n      svg {\n        width: 100%;\n        position: absolute;\n        top: 0px;\n        left: 0px;\n        z-index: 0;\n        top: 50%;\n        transform: translateY(-50%);\n        overflow: overlay;\n      }\n\n      .text, .offscreen-text {\n        width: 100%;\n        top: 50%;\n        transform: translateY(-50%);\n        display: block;\n        margin: 0;\n        text-align: center;\n        font-family: ${this.attrs.fontFamily}\n      }\n\n      .offscreen-text {\n        text-align: center;\n        top: -9999px;\n      }\n\n      .letter{\n        display:inline-block;\n        font-weight: 800;\n      }\n\n      .poligon{\n        opacity:0\n      }\n\n      .container{\n        width: ${this.attrs.width}px;\n        height: ${this.attrs.height}px;\n        overflow: hidden;\n        background: ${this.attrs.background};\n        display: flex;\n        align-content: center;\n        align-items: center;\n        position: relative;\n      }\n\n      .wrapper{\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-content: center;\n        justify-content: center;\n        align-items: center;\n      }\n  `}buildTree(){let p=this.textSize*this.attrs.text.length/2;for(let x=0;x<this.attrs.text.length;x++){const n=100*Math.random()-50,e=new t.CSSEffect({animatedAttrs:{width:`${this.textSize}px`,opacity:1,transform:{translateY:"0%",scale:1,rotate:n+"deg"}},initialValues:{width:"0px",opacity:0,transform:{translateY:"100%",scale:0}}},{duration:200,selector:".letter-"+x,easing:"easeOutExpo"}),a=new t.Group;let r=0;for(let n=0;n<8;n++){const e=Math.random(),r=e+(.4*Math.random()-.2),i=.52*this.textSize,s=i+this.textSize*Math.random()*.2,o=p+i*Math.cos(2*Math.PI*e),g=50+i*Math.sin(2*Math.PI*e),l=p+s*Math.cos(2*Math.PI*r),$=50+s*Math.sin(2*Math.PI*r),b=.1*this.textSize,d=.3+.7*Math.random(),h=b*d,c=.05*this.textSize*Math.random(),f=new t.CSSEffect({animatedAttrs:{opacity:1},initialValues:{opacity:0}},{duration:1,selector:`.poligon-${x}-${n},.circ-${x}-${n}`,easing:"easeOutExpo"}),u=new t.CSSEffect({animatedAttrs:{transform:{rotate:360*Math.random()+"deg",translateX:l-c+"px",translateY:$-c+"px"},opacity:0},initialValues:{transform:{scale:.15*c,rotate:360*Math.random()+"deg",translateX:o-h+"px",translateY:g-h+"px"},opacity:1}},{duration:600,selector:`.circ-${x}-${n}`,easing:"easeOutQuint"}),y=new t.CSSEffect({animatedAttrs:{transform:{rotate:360*Math.random()+"deg",translateX:l-h+"px",translateY:$-h+"px"},opacity:0},initialValues:{transform:{scale:d,rotate:360*Math.random()+"deg",translateX:o-h+"px",translateY:g-h+"px"},opacity:1}},{duration:600,selector:`.poligon-${x}-${n}`,easing:"easeOutQuint"});a.addIncident(f,0),a.addIncident(y,1),a.addIncident(u,1)}p+=this.textSize/2;const i=new t.CSSEffect({animatedAttrs:{transform:{translateY:"50%",rotate:"0deg"}},initialValues:{transform:{translateY:"0%"}}},{duration:200,selector:".letter-"+x,easing:"easeOutExpo"});this.addIncident(e,200*(x+1)+r),this.addIncident(a,200*(x+1)+r),this.addIncident(i,this.duration-200),r=200*(x+1)}}}class n extends t.HTMLClip{get fonts(){return[{type:"google-font",src:`https://fonts.googleapis.com/css2?family=${p(this.attrs.fontFamily,this.attrs.fontWeight)}&display=swap`}]}get html(){return`\n        <div class="container">\n          <svg>\n            <symbol id="s-text">\n              <text text-anchor="middle" x="50%" y="${this.attrs.verticalAlign||"50%"}" class="text--line">${this.attrs.text}</text>\n            </symbol>\n            <g class="g-ants">\n              <use xlink:href="#s-text" class="text-copy"></use>\n              <use xlink:href="#s-text" class="text-copy"></use>\n              <use xlink:href="#s-text" class="text-copy"></use>\n              <use xlink:href="#s-text" class="text-copy"></use>\n              <use xlink:href="#s-text" class="text-copy"></use>\n            </g>\n          </svg> \n        </div>\n    `}get css(){return`\n    .container{\n      width: ${this.attrs.width}px;\n      height: ${this.attrs.height}px;\n      overflow: hidden;\n      background: ${this.attrs.background};\n      display: flex;\n      align-content: center;\n      align-items: center;\n      position: relative;\n    }\n    .g-ants{\n      position: relative;\n    }\n    .text--line {\n      font-size: ${this.attrs.fontSize}px;\n      font-family: ${this.attrs.fontFamily}\n    }\n    svg {\n      width: 100%;\n      height: 100%;\n    }\n    .text-copy {\n      fill: none;\n      stroke: white;\n      stroke-dasharray: 100% 28%;\n      stroke-width: ${this.attrs.strokeWidth}px;\n    }\n    .text-copy:nth-child(1) {\n      stroke: ${this.attrs.colors[0]};\n      stroke-dashoffset: 7%;\n    }\n    .text-copy:nth-child(2) {\n      stroke: ${this.attrs.colors[1]};\n      stroke-dashoffset: 14%;\n    }\n    .text-copy:nth-child(3) {\n      stroke: ${this.attrs.colors[2]};\n      stroke-dashoffset: 21%;\n    }\n    .text-copy:nth-child(4) {\n      stroke: ${this.attrs.colors[3]};\n      stroke-dashoffset: 28%;\n    }\n    .text-copy:nth-child(5) {\n      stroke: ${this.attrs.colors[4]};\n      stroke-dashoffset: 35%;\n    }\n  `}buildTree(){const p=new t.CSSEffect({animatedAttrs:{strokeDashoffset:"35%",strokeDasharray:" 0 87.5%"}},{duration:4e3,selector:".text-copy"});this.addIncident(p,0)}}class e extends t.HTMLClip{get fonts(){return[{type:"google-font",src:`https://fonts.googleapis.com/css2?family=${p(this.attrs.fontFamily,this.attrs.fontWeight)}&display=swap`}]}get html(){return`\n        <div class="container">\n          <div class="text">${this.attrs.text}</div>\n        </div>\n    `}get css(){return this.colorsRGB=this.attrs.colors.map((t=>function(t){let p=0,x=0,n=0;return 4===t.length?(p="0x"+t[1]+t[1],x="0x"+t[2]+t[2],n="0x"+t[3]+t[3]):7===t.length&&(p="0x"+t[1]+t[2],x="0x"+t[3]+t[4],n="0x"+t[5]+t[6]),`${+p},${+x},${+n}`}(t))),`\n      .container {\n        width: ${this.attrs.width}px;\n        height: ${this.attrs.height}px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        overflow: hidden;\n        color: ${this.attrs.textColor};\n      }\n\n      .text{\n        font-size: ${this.attrs.fontSize}px;\n        text-align: center;\n        width: 100%;\n        color: ${this.attrs.textColor};\n        background: ${this.attrs.background};\n        font-family: ${this.attrs.fontFamily}, cursive;\n        font-weight: 700;\n        height:100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    `}buildTree(){const p=(x=t.CSSEffect,n=this.colorsRGB,e=500,[new x({animatedAttrs:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 0), \n          15px 15px 0px rgba(${n[2]}, 0), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:`5px 5px 0px rgba(${n[0]},0), \n          10px 10px 0px rgba(${n[1]}, 0), \n          15px 15px 0px rgba(${n[2]}, 0), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 0), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:`5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 0), \n          15px 15px 0px rgba(${n[2]}, 0), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:`5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 0), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 1), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:`5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 1), \n          25px 25px 0px rgba(${n[4]}, 1), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:`5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 1), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 1), \n          25px 25px 0px rgba(${n[4]}, 1), \n          30px 30px 0px rgba(${n[5]}, 1), \n          35px 35px 0px rgba(${n[5]}, 1), \n          40px 40px 0px rgba(${n[5]}, 1), \n          45px 45px 0px rgba(${n[5]}, 1)`},initialValues:{textShadow:`5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 1), \n          25px 25px 0px rgba(${n[4]}, 1), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:`5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 1), \n          25px 25px 0px rgba(${n[4]}, 1), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 1), \n          25px 25px 0px rgba(${n[4]}, 1), \n          30px 30px 0px rgba(${n[5]}, 1), \n          35px 35px 0px rgba(${n[5]}, 1), \n          40px 40px 0px rgba(${n[5]}, 1), \n          45px 45px 0px rgba(${n[5]}, 1)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:`5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 1), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 1), \n          25px 25px 0px rgba(${n[4]}, 1), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:`5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 1), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:`5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 0), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 1), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:`5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 0), \n          15px 15px 0px rgba(${n[2]}, 0), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 1), \n          15px 15px 0px rgba(${n[2]}, 0), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"}),new x({animatedAttrs:{textShadow:`5px 5px 0px rgba(${n[0]},0), \n          10px 10px 0px rgba(${n[1]}, 0), \n          15px 15px 0px rgba(${n[2]}, 0), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`},initialValues:{textShadow:` 5px 5px 0px rgba(${n[0]},1), \n          10px 10px 0px rgba(${n[1]}, 0), \n          15px 15px 0px rgba(${n[2]}, 0), \n          20px 20px 0px rgba(${n[3]}, 0), \n          25px 25px 0px rgba(${n[4]}, 0), \n          30px 30px 0px rgba(${n[5]}, 0), \n          35px 35px 0px rgba(${n[5]}, 0), \n          40px 40px 0px rgba(${n[5]}, 0), \n          45px 45px 0px rgba(${n[5]}, 0)`}},{duration:e,selector:".text"})]);var x,n,e;const a=this.attrs.reverse?p.length:p.length/2;for(let t=0;t<a;t++)this.addIncident(p[t],500*t)}}class a extends t.HTMLClip{get fonts(){let t=this.attrs.fontFamily.split(" ").join("+");t+=`:wght@${this.attrs.fontWeightList.join(";")}`;return[{type:"google-font",src:`https://fonts.googleapis.com/css2?family=${t}&display=swap`}]}get html(){const t=[];for(let p=1;p<=this.attrs.repeats;p++)t.push(`<div class="text-item">${this.attrs.text}</div>`);return`\n    <div class="wrapper">\n      <div class="text">\n      ${t.join("")}\n      </div>\n    </div>\n    `}get css(){return`\n    .wrapper{\n      width: ${this.attrs.width}px;\n      height: ${this.attrs.height}px;\n      display: flex;\n      align-content: center;\n      justify-content: center;\n      align-items: center;\n    }\n    .text{\n      font-size:${this.attrs.fontSize}px;\n      color:${this.attrs.textColor};\n      text-transform:uppercase;\n      font-family: ${this.attrs.fontFamily};\n      position: absolute;\n      font-weight: 100;\n      transform:rotate(${this.attrs.rotate||0}deg);\n    }\n   \n  `}buildTree(){const p=new t.Combo({incidents:[{incidentClass:t.CSSEffect,attrs:{animatedAttrs:{fontWeight:"900"}},props:{duration:300},position:0},{incidentClass:t.CSSEffect,attrs:{animatedAttrs:{fontWeight:"100"}},props:{duration:300},position:300}]},{selector:".text-item",delay:"@expression(index * 20)"});this.addIncident(p,0)}}return{npm_name:"@donkeyclip/motorcortex-textfxs",version:"0.3.0",incidents:[{exportable:x,name:"SvgExplosion",attributesValidationRules:{text:{type:"string"},colors:{optional:!0,type:"array",min:2,items:{optional:!0,type:"color"}},width:{type:"number"},height:{type:"number"},background:{optional:!0,type:"color"},fontFamily:{type:"string"}}},{exportable:n,name:"SvgLines",attributesValidationRules:{text:{type:"string"},colors:{optional:!0,type:"array",min:2,items:{optional:!0,type:"color"}},width:{type:"number"},fontSize:{type:"number"},strokeWidth:{type:"number"},height:{type:"number"},background:{optional:!0,type:"color"},fontFamily:{type:"string"},verticalAlign:{type:"string"}}},{exportable:e,name:"Shadow",attributesValidationRules:{text:{type:"string"},colors:{optional:!0,type:"array",min:2,items:{optional:!0,type:"color"}},width:{type:"number"},fontSize:{type:"number"},fontFamily:{type:"string"},textColor:{type:"string"},height:{type:"number"},background:{optional:!0,type:"color"},reverse:{type:"boolean"}}},{exportable:a,name:"FontWeight",attributesValidationRules:{text:{type:"string"},fontWeightList:{type:"array",items:{type:"number"}},repeats:{type:"number",min:1},width:{type:"number"},height:{type:"number"},fontSize:{type:"number"},fontFamily:{type:"string"},textColor:{type:"color"}}}]}}));
